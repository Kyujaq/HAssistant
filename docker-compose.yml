services:
  ollama:
    image: ollama/ollama:latest
    container_name: hassistant-ollama
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0', '1']  # Both GTX 1080 Ti and GTX 1070
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - OLLAMA_HOST=0.0.0.0:11434
    ports:
      - "11434:11434"
    volumes:
      - ./ollama:/root/.ollama  # Persistent model storage
      - /home/qjaq/assistant/models:/models:ro  # Read-only access to existing models
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - ha_network

  # Wyoming Whisper STT (Speech-to-Text)
  whisper:
    image: rhasspy/wyoming-whisper:latest
    container_name: hassistant-whisper
    command: --model small --language en --uri 'tcp://0.0.0.0:10300' --data-dir /data
    volumes:
      - ./whisper_data:/data
    ports:
      - "10300:10300"
    restart: unless-stopped
    networks:
      - ha_network

  # Wyoming Piper TTS (Text-to-Speech) with GLaDOS voice
  piper:
    image: rhasspy/wyoming-piper:latest
    container_name: hassistant-piper
    command: --voice en_US-glados-high --uri 'tcp://0.0.0.0:10200' --data-dir /data --piper /usr/share/piper/piper
    volumes:
      - ./piper_data:/data
      - /home/qjaq/assistant/models/tts:/custom-voices:ro
    ports:
      - "10200:10200"
    restart: unless-stopped
    networks:
      - ha_network
    environment:
      - PIPER_VOICE=en_US-glados-high  # Will use if custom voice added

  # Home Assistant
  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: hassistant-homeassistant
    volumes:
      - ./ha_config:/config
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "8123:8123"
    restart: unless-stopped
    privileged: true
    networks:
      - ha_network

  # PostgreSQL with pgvector for Letta memory
  postgres:
    image: pgvector/pgvector:pg15
    container_name: hassistant-postgres
    environment:
      - POSTGRES_DB=hassistant
      - POSTGRES_USER=hassistant
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-hassistant_secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "5433:5432"  # Use 5433 to avoid conflict with /assistant postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hassistant -d hassistant"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ha_network

  # Redis for session cache and ephemeral data
  redis:
    image: redis:7-alpine
    container_name: hassistant-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-hassistant_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"  # Use 6380 to avoid conflict with /assistant redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ha_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ha_network:
    external: true
    name: assistant_default  # Connect to existing HA network
